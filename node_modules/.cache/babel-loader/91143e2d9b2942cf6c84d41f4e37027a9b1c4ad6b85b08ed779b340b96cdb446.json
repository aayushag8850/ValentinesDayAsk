{"ast":null,"code":"var _jsxFileName = \"/Users/aayushagarwal/Valentines Day Puzzle/valentine-quest/src/components/Crossword.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './Crossword.css';\n\n// Each row is an array of letters\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CROSSWORD_ANSWERS = [['C', 'A', 'N', 'D', 'Y'],\n// Row 0\n['R', 'O', 'S', 'E', 'S'] // Row 1\n];\nconst Crossword = ({\n  onComplete\n}) => {\n  _s();\n  // Initialize user input state as a 2D array of empty strings\n  const [userGrid, setUserGrid] = useState([['', '', '', '', ''], ['', '', '', '', '']]);\n  const [feedback, setFeedback] = useState('');\n\n  // Create a 2D array of refs so we can control focus manually\n  // For 2 rows, 5 columns each:\n  const inputRefs = useRef(Array.from({\n    length: CROSSWORD_ANSWERS.length\n  }, () => Array.from({\n    length: CROSSWORD_ANSWERS[0].length\n  }, () => /*#__PURE__*/React.createRef())));\n\n  // Handle user typing in a cell\n  const handleChange = (row, col, value) => {\n    const uppercaseValue = value.toUpperCase().slice(0, 1); // Only keep 1 char, uppercase\n\n    // Update userGrid state\n    const newGrid = userGrid.map(r => [...r]);\n    newGrid[row][col] = uppercaseValue;\n    setUserGrid(newGrid);\n\n    // If user typed a letter (not empty), move focus to the next cell\n    if (uppercaseValue) {\n      // If we're not at the last column, go to the next column in the same row\n      if (col < CROSSWORD_ANSWERS[row].length - 1) {\n        inputRefs.current[row][col + 1].current.focus();\n      } else {\n        // If you want to move to the next row automatically when a row is finished:\n        if (row < CROSSWORD_ANSWERS.length - 1) {\n          inputRefs.current[row + 1][0].current.focus();\n        }\n        // Otherwise, do nothing if it's the very last cell\n      }\n    }\n  };\n\n  // Check if the user’s inputs match the answers\n  const checkCrossword = () => {\n    let isCorrect = true;\n    for (let r = 0; r < CROSSWORD_ANSWERS.length; r++) {\n      for (let c = 0; c < CROSSWORD_ANSWERS[r].length; c++) {\n        if (userGrid[r][c] !== CROSSWORD_ANSWERS[r][c]) {\n          isCorrect = false;\n          break;\n        }\n      }\n    }\n    if (isCorrect) {\n      setFeedback('Correct! On to the quiz...');\n      // Move to the next puzzle after a short delay\n      setTimeout(() => {\n        onComplete(); // Tell parent we’re done\n      }, 1000);\n    } else {\n      setFeedback('Not quite right. Try again!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crossword-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Crossword Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"1 Across:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 10\n      }, this), \" A sweet treat often given on Valentine\\u2019s Day\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"2 Across:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 10\n      }, this), \" Classic Valentine\\u2019s flowers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crossword-grid\",\n      children: userGrid.map((rowArr, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crossword-row\",\n        children: rowArr.map((cellVal, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crossword-cell\",\n          children: [row === 0 && col === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cell-label\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 46\n          }, this), row === 1 && col === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cell-label\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"crossword-input\",\n            type: \"text\",\n            value: cellVal,\n            ref: inputRefs.current[row][col],\n            onChange: e => handleChange(row, col, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)]\n        }, `cell-${row}-${col}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this))\n      }, `row-${row}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkCrossword,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Check Crossword\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback\",\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Crossword, \"4vOKmM8Y0dLFN5kMWEFVfvivXys=\");\n_c = Crossword;\nexport default Crossword;\nvar _c;\n$RefreshReg$(_c, \"Crossword\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","CROSSWORD_ANSWERS","Crossword","onComplete","_s","userGrid","setUserGrid","feedback","setFeedback","inputRefs","Array","from","length","createRef","handleChange","row","col","value","uppercaseValue","toUpperCase","slice","newGrid","map","r","current","focus","checkCrossword","isCorrect","c","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowArr","cellVal","type","ref","onChange","e","target","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/aayushagarwal/Valentines Day Puzzle/valentine-quest/src/components/Crossword.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './Crossword.css';\n\n// Each row is an array of letters\nconst CROSSWORD_ANSWERS = [\n  ['C', 'A', 'N', 'D', 'Y'], // Row 0\n  ['R', 'O', 'S', 'E', 'S'], // Row 1\n];\n\nconst Crossword = ({ onComplete }) => {\n  // Initialize user input state as a 2D array of empty strings\n  const [userGrid, setUserGrid] = useState([\n    ['', '', '', '', ''],\n    ['', '', '', '', ''],\n  ]);\n  const [feedback, setFeedback] = useState('');\n\n  // Create a 2D array of refs so we can control focus manually\n  // For 2 rows, 5 columns each:\n  const inputRefs = useRef(\n    Array.from({ length: CROSSWORD_ANSWERS.length }, () =>\n      Array.from({ length: CROSSWORD_ANSWERS[0].length }, () => React.createRef())\n    )\n  );\n\n  // Handle user typing in a cell\n  const handleChange = (row, col, value) => {\n    const uppercaseValue = value.toUpperCase().slice(0, 1); // Only keep 1 char, uppercase\n\n    // Update userGrid state\n    const newGrid = userGrid.map((r) => [...r]);\n    newGrid[row][col] = uppercaseValue;\n    setUserGrid(newGrid);\n\n    // If user typed a letter (not empty), move focus to the next cell\n    if (uppercaseValue) {\n      // If we're not at the last column, go to the next column in the same row\n      if (col < CROSSWORD_ANSWERS[row].length - 1) {\n        inputRefs.current[row][col + 1].current.focus();\n      } else {\n        // If you want to move to the next row automatically when a row is finished:\n        if (row < CROSSWORD_ANSWERS.length - 1) {\n          inputRefs.current[row + 1][0].current.focus();\n        }\n        // Otherwise, do nothing if it's the very last cell\n      }\n    }\n  };\n\n  // Check if the user’s inputs match the answers\n  const checkCrossword = () => {\n    let isCorrect = true;\n    for (let r = 0; r < CROSSWORD_ANSWERS.length; r++) {\n      for (let c = 0; c < CROSSWORD_ANSWERS[r].length; c++) {\n        if (userGrid[r][c] !== CROSSWORD_ANSWERS[r][c]) {\n          isCorrect = false;\n          break;\n        }\n      }\n    }\n\n    if (isCorrect) {\n      setFeedback('Correct! On to the quiz...');\n      // Move to the next puzzle after a short delay\n      setTimeout(() => {\n        onComplete(); // Tell parent we’re done\n      }, 1000);\n    } else {\n      setFeedback('Not quite right. Try again!');\n    }\n  };\n\n  return (\n    <div className=\"crossword-section\">\n      <h2>Crossword Puzzle</h2>\n      <p><strong>Clues:</strong></p>\n      <p><strong>1 Across:</strong> A sweet treat often given on Valentine’s Day</p>\n      <p><strong>2 Across:</strong> Classic Valentine’s flowers</p>\n\n      <div className=\"crossword-grid\">\n        {userGrid.map((rowArr, row) => (\n          <div key={`row-${row}`} className=\"crossword-row\">\n            {rowArr.map((cellVal, col) => (\n              <div key={`cell-${row}-${col}`} className=\"crossword-cell\">\n                {/* Clue labels (e.g., \"1\" in top-left corner) */}\n                {(row === 0 && col === 0) && <span className=\"cell-label\">1</span>}\n                {(row === 1 && col === 0) && <span className=\"cell-label\">2</span>}\n\n                <input\n                  className=\"crossword-input\"\n                  type=\"text\"\n                  value={cellVal}\n                  ref={inputRefs.current[row][col]}\n                  onChange={(e) => handleChange(row, col, e.target.value)}\n                />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <button onClick={checkCrossword} style={{ marginTop: '10px' }}>Check Crossword</button>\n      <p className=\"feedback\">{feedback}</p>\n    </div>\n  );\n};\n\nexport default Crossword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}