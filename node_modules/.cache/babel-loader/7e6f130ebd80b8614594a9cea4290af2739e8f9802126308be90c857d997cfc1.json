{"ast":null,"code":"var _jsxFileName = \"/Users/aayushagarwal/Valentines Day Puzzle/valentine-quest/src/components/Crossword.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './Crossword.css';\n\n// Example grid: 2 rows, 5 columns each\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CROSSWORD_ANSWERS = [['C', 'A', 'N', 'D', 'Y'],\n// Row 0\n['R', 'O', 'S', 'E', 'S'] // Row 1\n];\nconst Crossword = ({\n  onComplete\n}) => {\n  _s();\n  // 1) Keep track of user input for each cell\n  const [userGrid, setUserGrid] = useState(Array.from({\n    length: CROSSWORD_ANSWERS.length\n  }, () => Array.from({\n    length: CROSSWORD_ANSWERS[0].length\n  }, () => '')));\n  const [feedback, setFeedback] = useState('');\n\n  // 2) Create refs for each cell to control focus\n  const inputRefs = useRef(Array.from({\n    length: CROSSWORD_ANSWERS.length\n  }, () => Array.from({\n    length: CROSSWORD_ANSWERS[0].length\n  }, () => /*#__PURE__*/React.createRef())));\n\n  /**\n   * Handle input changes:\n   * - Convert to uppercase\n   * - Store in state\n   * - If non-empty, move focus forward to the next cell\n   */\n  const handleChange = (row, col, value) => {\n    const uppercaseValue = value.toUpperCase().slice(0, 1); // Only 1 char\n\n    // Update userGrid\n    const newGrid = userGrid.map(r => [...r]);\n    newGrid[row][col] = uppercaseValue;\n    setUserGrid(newGrid);\n\n    // If user typed a letter (non-empty), move to the next cell\n    if (uppercaseValue) {\n      // If not the last column in the row:\n      if (col < CROSSWORD_ANSWERS[row].length - 1) {\n        inputRefs.current[row][col + 1].current.focus();\n      } else {\n        // Optionally jump to next row (first cell), if not at last row\n        if (row < CROSSWORD_ANSWERS.length - 1) {\n          inputRefs.current[row + 1][0].current.focus();\n        }\n      }\n    }\n  };\n\n  /**\n   * Handle key down:\n   * - If backspace is pressed AND the current cell is empty,\n   *   move focus to the previous cell (so user can delete it).\n   */\n  const handleKeyDown = (row, col, e) => {\n    if (e.key === 'Backspace') {\n      // If current cell is already empty, move focus backward\n      if (!userGrid[row][col]) {\n        e.preventDefault(); // Prevent default backspace navigation in browser\n\n        // Move to the previous cell\n        if (col > 0) {\n          // previous column in the same row\n          inputRefs.current[row][col - 1].current.focus();\n        } else if (row > 0) {\n          // jump to the previous row, last column\n          const prevRowLastCol = CROSSWORD_ANSWERS[row - 1].length - 1;\n          inputRefs.current[row - 1][prevRowLastCol].current.focus();\n        }\n      }\n      // If the cell is *not* empty, the default behavior will erase that letter,\n      // which is probably what we want. So let it happen.\n    }\n  };\n\n  /**\n   * Check the crossword:\n   * - Compare userGrid letters to CROSSWORD_ANSWERS\n   * - If all correct, trigger next puzzle\n   */\n  const checkCrossword = () => {\n    let isCorrect = true;\n    for (let r = 0; r < CROSSWORD_ANSWERS.length; r++) {\n      for (let c = 0; c < CROSSWORD_ANSWERS[r].length; c++) {\n        if (userGrid[r][c] !== CROSSWORD_ANSWERS[r][c]) {\n          isCorrect = false;\n          break;\n        }\n      }\n      if (!isCorrect) break;\n    }\n    if (isCorrect) {\n      setFeedback('Correct! Moving to the quiz...');\n      setTimeout(() => onComplete(), 1000);\n    } else {\n      setFeedback('Not quite right. Try again!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crossword-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Crossword Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"1 Across:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 10\n      }, this), \" A sweet treat often given on Valentine\\u2019s Day\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"2 Across:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 10\n      }, this), \" Classic Valentine\\u2019s flowers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crossword-grid\",\n      children: userGrid.map((rowArr, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crossword-row\",\n        children: rowArr.map((cellVal, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crossword-cell\",\n          children: [row === 0 && col === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cell-label\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 46\n          }, this), row === 1 && col === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cell-label\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"crossword-input\",\n            type: \"text\",\n            maxLength: 1,\n            value: cellVal,\n            ref: inputRefs.current[row][col],\n            onChange: e => handleChange(row, col, e.target.value),\n            onKeyDown: e => handleKeyDown(row, col, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)]\n        }, `cell-${row}-${col}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this))\n      }, `row-${row}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkCrossword,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Check Crossword\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback\",\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Crossword, \"h5bUCY6PgNIeGC0PFjC0tHXH0Tg=\");\n_c = Crossword;\nexport default Crossword;\nvar _c;\n$RefreshReg$(_c, \"Crossword\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","CROSSWORD_ANSWERS","Crossword","onComplete","_s","userGrid","setUserGrid","Array","from","length","feedback","setFeedback","inputRefs","createRef","handleChange","row","col","value","uppercaseValue","toUpperCase","slice","newGrid","map","r","current","focus","handleKeyDown","e","key","preventDefault","prevRowLastCol","checkCrossword","isCorrect","c","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowArr","cellVal","type","maxLength","ref","onChange","target","onKeyDown","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/aayushagarwal/Valentines Day Puzzle/valentine-quest/src/components/Crossword.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './Crossword.css';\n\n// Example grid: 2 rows, 5 columns each\nconst CROSSWORD_ANSWERS = [\n  ['C', 'A', 'N', 'D', 'Y'], // Row 0\n  ['R', 'O', 'S', 'E', 'S'], // Row 1\n];\n\nconst Crossword = ({ onComplete }) => {\n  // 1) Keep track of user input for each cell\n  const [userGrid, setUserGrid] = useState(\n    Array.from({ length: CROSSWORD_ANSWERS.length }, () =>\n      Array.from({ length: CROSSWORD_ANSWERS[0].length }, () => '')\n    )\n  );\n  const [feedback, setFeedback] = useState('');\n\n  // 2) Create refs for each cell to control focus\n  const inputRefs = useRef(\n    Array.from({ length: CROSSWORD_ANSWERS.length }, () =>\n      Array.from({ length: CROSSWORD_ANSWERS[0].length }, () => React.createRef())\n    )\n  );\n\n  /**\n   * Handle input changes:\n   * - Convert to uppercase\n   * - Store in state\n   * - If non-empty, move focus forward to the next cell\n   */\n  const handleChange = (row, col, value) => {\n    const uppercaseValue = value.toUpperCase().slice(0, 1); // Only 1 char\n\n    // Update userGrid\n    const newGrid = userGrid.map(r => [...r]);\n    newGrid[row][col] = uppercaseValue;\n    setUserGrid(newGrid);\n\n    // If user typed a letter (non-empty), move to the next cell\n    if (uppercaseValue) {\n      // If not the last column in the row:\n      if (col < CROSSWORD_ANSWERS[row].length - 1) {\n        inputRefs.current[row][col + 1].current.focus();\n      } else {\n        // Optionally jump to next row (first cell), if not at last row\n        if (row < CROSSWORD_ANSWERS.length - 1) {\n          inputRefs.current[row + 1][0].current.focus();\n        }\n      }\n    }\n  };\n\n  /**\n   * Handle key down:\n   * - If backspace is pressed AND the current cell is empty,\n   *   move focus to the previous cell (so user can delete it).\n   */\n  const handleKeyDown = (row, col, e) => {\n    if (e.key === 'Backspace') {\n      // If current cell is already empty, move focus backward\n      if (!userGrid[row][col]) {\n        e.preventDefault(); // Prevent default backspace navigation in browser\n\n        // Move to the previous cell\n        if (col > 0) {\n          // previous column in the same row\n          inputRefs.current[row][col - 1].current.focus();\n        } else if (row > 0) {\n          // jump to the previous row, last column\n          const prevRowLastCol = CROSSWORD_ANSWERS[row - 1].length - 1;\n          inputRefs.current[row - 1][prevRowLastCol].current.focus();\n        }\n      }\n      // If the cell is *not* empty, the default behavior will erase that letter,\n      // which is probably what we want. So let it happen.\n    }\n  };\n\n  /**\n   * Check the crossword:\n   * - Compare userGrid letters to CROSSWORD_ANSWERS\n   * - If all correct, trigger next puzzle\n   */\n  const checkCrossword = () => {\n    let isCorrect = true;\n    for (let r = 0; r < CROSSWORD_ANSWERS.length; r++) {\n      for (let c = 0; c < CROSSWORD_ANSWERS[r].length; c++) {\n        if (userGrid[r][c] !== CROSSWORD_ANSWERS[r][c]) {\n          isCorrect = false;\n          break;\n        }\n      }\n      if (!isCorrect) break;\n    }\n\n    if (isCorrect) {\n      setFeedback('Correct! Moving to the quiz...');\n      setTimeout(() => onComplete(), 1000);\n    } else {\n      setFeedback('Not quite right. Try again!');\n    }\n  };\n\n  return (\n    <div className=\"crossword-section\">\n      <h2>Crossword Puzzle</h2>\n      <p><strong>Clues:</strong></p>\n      <p><strong>1 Across:</strong> A sweet treat often given on Valentine’s Day</p>\n      <p><strong>2 Across:</strong> Classic Valentine’s flowers</p>\n\n      <div className=\"crossword-grid\">\n        {userGrid.map((rowArr, row) => (\n          <div key={`row-${row}`} className=\"crossword-row\">\n            {rowArr.map((cellVal, col) => (\n              <div key={`cell-${row}-${col}`} className=\"crossword-cell\">\n                {/* Show clue numbers in relevant cells */}\n                {(row === 0 && col === 0) && <span className=\"cell-label\">1</span>}\n                {(row === 1 && col === 0) && <span className=\"cell-label\">2</span>}\n\n                <input\n                  className=\"crossword-input\"\n                  type=\"text\"\n                  maxLength={1}\n                  value={cellVal}\n                  ref={inputRefs.current[row][col]}\n                  onChange={(e) => handleChange(row, col, e.target.value)}\n                  onKeyDown={(e) => handleKeyDown(row, col, e)}\n                />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <button onClick={checkCrossword} style={{ marginTop: '10px' }}>Check Crossword</button>\n      <p className=\"feedback\">{feedback}</p>\n    </div>\n  );\n};\n\nexport default Crossword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}