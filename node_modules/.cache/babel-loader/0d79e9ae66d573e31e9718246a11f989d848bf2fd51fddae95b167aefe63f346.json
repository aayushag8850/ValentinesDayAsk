{"ast":null,"code":"var _jsxFileName = \"/Users/aayushagarwal/Valentines Day Puzzle/valentine-quest/src/components/Crossword.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './Crossword.css';\n\n/**\n * Each item in puzzleLayout is either null (black/unavailable) or an object:\n * {\n *   clueNumA?: number,    // clue number for an Across entry starting here\n *   clueNumD?: number,    // clue number for a Down entry starting here\n *   solution: string,     // correct letter (optional, if you want validation)\n * }\n *\n * We'll approximate the puzzle shape from your screenshot.\n * The grid below is 8 rows x 9 columns (row=0..7, col=0..8).\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst puzzleLayout = [[null, null, null, null, null, null, null, null, {\n  clueNumD: 2,\n  solution: 'pookie'\n}, null],\n// Row 0 (top row): 9 open cells, with #1 and #2 in first two squares\n[null, null, null, {\n  clueNumA: 1,\n  solution: 'bschool'\n}, {\n  clueNumD: 2,\n  solution: 'styles'\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}],\n// Row 1: in the screenshot, only columns 1..2..3..4..5 are part of the puzzle,\n// but let's approximate. We'll leave some black squares to mimic the layout.\n[null, null, null,\n// continues Down #2\nnull, {\n  solution: ''\n}, null, null,\n// #5 starts here going down\nnull, {\n  solution: ''\n}, null],\n// Row 2: columns for #3 Down, #5 Down, etc.\n[{\n  clueNumD: 3,\n  solution: 'peonies'\n}, null, null,\n// #2 down continues\nnull,\n// #3 starts here, going down\n{\n  solution: ''\n}, null,\n// #4 Across starts\nnull,\n// #5 down continues\nnull, {\n  solution: ''\n}, null],\n// Row 3\n[{\n  solution: ''\n}, null, {\n  solution: ''\n},\n// #2 down continues\n{\n  solution: ''\n},\n// #3 down continues\n{\n  solution: ''\n}, {\n  solution: ''\n},\n// #4 across continues\n{\n  solution: ''\n},\n// #5 down continues\nnull, {\n  solution: ''\n}, null],\n// Row 4\n[{\n  solution: ''\n}, null, null,\n// #2 down continues (last row for #2?)\nnull,\n// #3 down continues\n{\n  solution: ''\n}, null,\n// #4 across continues\nnull,\n// #5 down continues\nnull,\n// #6 across starts\n{\n  solution: ''\n}, null],\n// Row 5\n[{\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n},\n// #3 down continues (maybe last row for #3)\n{\n  solution: ''\n}, null, null,\n// #5 down continues\nnull,\n// #6 across continues\nnull, null],\n// Row 6\n[{\n  solution: ''\n}, null,\n// #7 across starts\nnull, null, null, null, null,\n// #5 down ends?\nnull,\n// #6 across continues (overlaps row above?)\nnull, null],\n// Row 7\n[{\n  solution: ''\n}, null,\n// #7 across starts\nnull, null, null, null, null,\n// #5 down ends?\nnull,\n// #6 across continues (overlaps row above?)\nnull, null],\n// Row 8\n[{\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, {\n  solution: ''\n}, null,\n// #5 down ends?\nnull,\n// #6 across continues (overlaps row above?)\nnull, null]];\nconst Crossword = ({\n  onComplete\n}) => {\n  _s();\n  // Convert puzzle layout to a matching 2D array of user inputs\n  const [userGrid, setUserGrid] = useState(() => puzzleLayout.map(row => row.map(cell => cell ? '' : null // if cell is null, keep null in userGrid; else empty string\n  )));\n  const [feedback, setFeedback] = useState('');\n\n  // Create refs for each open cell so we can move focus\n  // We'll store them in a parallel structure to puzzleLayout\n  const cellRefs = useRef(puzzleLayout.map(row => row.map(cell => cell ? /*#__PURE__*/React.createRef() : null)));\n\n  // Handler for user typing a letter\n  const handleChange = (r, c, value) => {\n    const letter = value.toUpperCase().slice(0, 1); // single uppercase char\n\n    // Update userGrid\n    const newGrid = userGrid.map(row => [...row]);\n    newGrid[r][c] = letter;\n    setUserGrid(newGrid);\n\n    // If the user typed a letter, move forward\n    if (letter) {\n      const [nextR, nextC] = findNextCell(r, c);\n      if (nextR !== null && nextC !== null) {\n        cellRefs.current[nextR][nextC].current.focus();\n      }\n    }\n  };\n\n  // Handler for backspace logic: if the current cell is empty, move focus backward\n  const handleKeyDown = (r, c, e) => {\n    if (e.key === 'Backspace' && !userGrid[r][c]) {\n      e.preventDefault();\n      const [prevR, prevC] = findPrevCell(r, c);\n      if (prevR !== null && prevC !== null) {\n        const newGrid = userGrid.map(row => [...row]);\n        newGrid[r][c] = ''; // ensure it's empty\n        setUserGrid(newGrid);\n        cellRefs.current[prevR][prevC].current.focus();\n      }\n    }\n  };\n\n  // Move to next cell to the right (or next row) in reading order\n  function findNextCell(row, col) {\n    let nr = row;\n    let nc = col + 1;\n    // move to next row if we go past the last column\n    while (nr < puzzleLayout.length) {\n      while (nc < puzzleLayout[nr].length) {\n        if (puzzleLayout[nr][nc]) {\n          return [nr, nc];\n        }\n        nc++;\n      }\n      nr++;\n      nc = 0;\n    }\n    return [null, null]; // no next cell\n  }\n\n  // Move to the previous cell in reading order\n  function findPrevCell(row, col) {\n    let nr = row;\n    let nc = col - 1;\n    while (nr >= 0) {\n      while (nc >= 0) {\n        if (puzzleLayout[nr][nc]) {\n          return [nr, nc];\n        }\n        nc--;\n      }\n      nr--;\n      if (nr >= 0) {\n        nc = puzzleLayout[nr].length - 1;\n      }\n    }\n    return [null, null]; // no previous cell\n  }\n\n  // Example checkCrossword: right now, we only check that every open cell is filled\n  // If you want to validate exact letters, store them in puzzleLayout[x][y].solution\n  // and compare userGrid[x][y] === puzzleLayout[x][y].solution\n  const checkCrossword = () => {\n    // For demonstration, let's just check that every open cell is non-empty\n    for (let r = 0; r < puzzleLayout.length; r++) {\n      for (let c = 0; c < puzzleLayout[r].length; c++) {\n        if (puzzleLayout[r][c] && !userGrid[r][c]) {\n          setFeedback('Not quite done â€” some cells are blank.');\n          return;\n        }\n      }\n    }\n    // If we get here, all open cells have something\n    setFeedback('Looks great! On to the next puzzle...');\n    setTimeout(() => {\n      onComplete();\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crossword-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Crossword Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Across\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: {\n        textAlign: 'left',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"1: where we first met\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"4: our halloween costume inspo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"6: one of your favorite candies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"7: when our second date was\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: {\n        textAlign: 'left',\n        margin: '0 auto',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"2: the last name of your favorite person\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"3: your favorite flower\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"5: something I called you on our first date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: puzzleLayout.map((row, rIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-row\",\n        children: row.map((cell, cIdx) => {\n          if (!cell) {\n            // null => black / unavailable\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cell black-cell\"\n            }, `cell-${rIdx}-${cIdx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 24\n            }, this);\n          }\n          const {\n            clueNumA,\n            clueNumD\n          } = cell;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell\",\n            children: [(clueNumA || clueNumD) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"clue-label\",\n              children: clueNumA || clueNumD\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: cellRefs.current[rIdx][cIdx],\n              className: \"cell-input\",\n              type: \"text\",\n              maxLength: 1,\n              value: userGrid[rIdx][cIdx],\n              onChange: e => handleChange(rIdx, cIdx, e.target.value),\n              onKeyDown: e => handleKeyDown(rIdx, cIdx, e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }, this)]\n          }, `cell-${rIdx}-${cIdx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this);\n        })\n      }, `row-${rIdx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkCrossword,\n      style: {\n        marginTop: '1rem'\n      },\n      children: \"Check Crossword\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback\",\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(Crossword, \"qpYP0MOkt05VjIF6BTdQuWtHK+g=\");\n_c = Crossword;\nexport default Crossword;\nvar _c;\n$RefreshReg$(_c, \"Crossword\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","puzzleLayout","clueNumD","solution","clueNumA","Crossword","onComplete","_s","userGrid","setUserGrid","map","row","cell","feedback","setFeedback","cellRefs","createRef","handleChange","r","c","value","letter","toUpperCase","slice","newGrid","nextR","nextC","findNextCell","current","focus","handleKeyDown","e","key","preventDefault","prevR","prevC","findPrevCell","col","nr","nc","length","checkCrossword","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","display","margin","rIdx","cIdx","ref","type","maxLength","onChange","target","onKeyDown","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/aayushagarwal/Valentines Day Puzzle/valentine-quest/src/components/Crossword.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './Crossword.css';\n\n/**\n * Each item in puzzleLayout is either null (black/unavailable) or an object:\n * {\n *   clueNumA?: number,    // clue number for an Across entry starting here\n *   clueNumD?: number,    // clue number for a Down entry starting here\n *   solution: string,     // correct letter (optional, if you want validation)\n * }\n *\n * We'll approximate the puzzle shape from your screenshot.\n * The grid below is 8 rows x 9 columns (row=0..7, col=0..8).\n */\nconst puzzleLayout = [\n    [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        { clueNumD: 2, solution: 'pookie' },\n        null,\n      ],\n  // Row 0 (top row): 9 open cells, with #1 and #2 in first two squares\n  [\n    null,\n    null,\n    null,\n    { clueNumA: 1, solution: 'bschool' },\n    { clueNumD: 2, solution: 'styles' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n  ],\n  // Row 1: in the screenshot, only columns 1..2..3..4..5 are part of the puzzle,\n  // but let's approximate. We'll leave some black squares to mimic the layout.\n  [\n    null,\n    null,\n    null, // continues Down #2\n    null,\n    { solution: '' },\n    null,\n    null, // #5 starts here going down\n    null,\n    { solution: '' },\n    null,\n  ],\n  // Row 2: columns for #3 Down, #5 Down, etc.\n  [\n    { clueNumD: 3, solution: 'peonies' },\n    null,\n    null, // #2 down continues\n    null, // #3 starts here, going down\n    { solution: '' },\n    null, // #4 Across starts\n    null,              // #5 down continues\n    null,\n    { solution: '' },\n    null,\n  ],\n  // Row 3\n  [\n    { solution: '' },\n    null,\n    { solution: '' }, // #2 down continues\n    { solution: '' }, // #3 down continues\n    { solution: '' },\n    { solution: '' }, // #4 across continues\n    { solution: '' }, // #5 down continues\n    null,\n    { solution: '' },\n    null,\n  ],\n  // Row 4\n  [\n    { solution: '' },\n    null,\n    null, // #2 down continues (last row for #2?)\n    null, // #3 down continues\n    { solution: '' },\n    null, // #4 across continues\n    null, // #5 down continues\n    null, // #6 across starts\n    { solution: '' },\n    null,\n  ],\n  // Row 5\n  [\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' }, // #3 down continues (maybe last row for #3)\n    { solution: '' },\n    null,\n    null, // #5 down continues\n    null, // #6 across continues\n    null,\n    null,\n  ],\n  // Row 6\n  [\n    { solution: '' },\n    null, // #7 across starts\n    null,\n    null,\n    null,\n    null,\n    null, // #5 down ends?\n    null, // #6 across continues (overlaps row above?)\n    null,\n    null,\n  ],\n  // Row 7\n  [\n    { solution: '' },\n    null, // #7 across starts\n    null,\n    null,\n    null,\n    null,\n    null, // #5 down ends?\n    null, // #6 across continues (overlaps row above?)\n    null,\n    null,\n  ],\n  // Row 8\n  [\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    { solution: '' },\n    null, // #5 down ends?\n    null, // #6 across continues (overlaps row above?)\n    null,\n    null,\n  ],\n];\n\nconst Crossword = ({ onComplete }) => {\n  // Convert puzzle layout to a matching 2D array of user inputs\n  const [userGrid, setUserGrid] = useState(() =>\n    puzzleLayout.map(row =>\n      row.map(cell =>\n        cell ? '' : null // if cell is null, keep null in userGrid; else empty string\n      )\n    )\n  );\n  const [feedback, setFeedback] = useState('');\n\n  // Create refs for each open cell so we can move focus\n  // We'll store them in a parallel structure to puzzleLayout\n  const cellRefs = useRef(\n    puzzleLayout.map((row) =>\n      row.map((cell) => (cell ? React.createRef() : null))\n    )\n  );\n\n  // Handler for user typing a letter\n  const handleChange = (r, c, value) => {\n    const letter = value.toUpperCase().slice(0, 1); // single uppercase char\n\n    // Update userGrid\n    const newGrid = userGrid.map((row) => [...row]);\n    newGrid[r][c] = letter;\n    setUserGrid(newGrid);\n\n    // If the user typed a letter, move forward\n    if (letter) {\n      const [nextR, nextC] = findNextCell(r, c);\n      if (nextR !== null && nextC !== null) {\n        cellRefs.current[nextR][nextC].current.focus();\n      }\n    }\n  };\n\n  // Handler for backspace logic: if the current cell is empty, move focus backward\n  const handleKeyDown = (r, c, e) => {\n    if (e.key === 'Backspace' && !userGrid[r][c]) {\n      e.preventDefault();\n      const [prevR, prevC] = findPrevCell(r, c);\n      if (prevR !== null && prevC !== null) {\n        const newGrid = userGrid.map((row) => [...row]);\n        newGrid[r][c] = ''; // ensure it's empty\n        setUserGrid(newGrid);\n        cellRefs.current[prevR][prevC].current.focus();\n      }\n    }\n  };\n\n  // Move to next cell to the right (or next row) in reading order\n  function findNextCell(row, col) {\n    let nr = row;\n    let nc = col + 1;\n    // move to next row if we go past the last column\n    while (nr < puzzleLayout.length) {\n      while (nc < puzzleLayout[nr].length) {\n        if (puzzleLayout[nr][nc]) {\n          return [nr, nc];\n        }\n        nc++;\n      }\n      nr++;\n      nc = 0;\n    }\n    return [null, null]; // no next cell\n  }\n\n  // Move to the previous cell in reading order\n  function findPrevCell(row, col) {\n    let nr = row;\n    let nc = col - 1;\n    while (nr >= 0) {\n      while (nc >= 0) {\n        if (puzzleLayout[nr][nc]) {\n          return [nr, nc];\n        }\n        nc--;\n      }\n      nr--;\n      if (nr >= 0) {\n        nc = puzzleLayout[nr].length - 1;\n      }\n    }\n    return [null, null]; // no previous cell\n  }\n\n  // Example checkCrossword: right now, we only check that every open cell is filled\n  // If you want to validate exact letters, store them in puzzleLayout[x][y].solution\n  // and compare userGrid[x][y] === puzzleLayout[x][y].solution\n  const checkCrossword = () => {\n    // For demonstration, let's just check that every open cell is non-empty\n    for (let r = 0; r < puzzleLayout.length; r++) {\n      for (let c = 0; c < puzzleLayout[r].length; c++) {\n        if (puzzleLayout[r][c] && !userGrid[r][c]) {\n          setFeedback('Not quite done â€” some cells are blank.');\n          return;\n        }\n      }\n    }\n    // If we get here, all open cells have something\n    setFeedback('Looks great! On to the next puzzle...');\n    setTimeout(() => {\n      onComplete();\n    }, 1000);\n  };\n\n  return (\n    <div className=\"crossword-section\">\n      <h2>Crossword Puzzle</h2>\n      <p><strong>Across</strong></p>\n      <ol style={{ textAlign: 'left', display: 'inline-block' }}>\n        <li>1: where we first met</li>\n        <li>4: our halloween costume inspo</li>\n        <li>6: one of your favorite candies</li>\n        <li>7: when our second date was</li>\n      </ol>\n      <p><strong>Down</strong></p>\n      <ol style={{ textAlign: 'left', margin: '0 auto', display: 'inline-block' }}>\n        <li>2: the last name of your favorite person</li>\n        <li>3: your favorite flower</li>\n        <li>5: something I called you on our first date</li>\n      </ol>\n\n      <div className=\"puzzle-grid\">\n        {puzzleLayout.map((row, rIdx) => (\n          <div className=\"puzzle-row\" key={`row-${rIdx}`}>\n            {row.map((cell, cIdx) => {\n              if (!cell) {\n                // null => black / unavailable\n                return <div className=\"cell black-cell\" key={`cell-${rIdx}-${cIdx}`} />;\n              }\n              const { clueNumA, clueNumD } = cell;\n              return (\n                <div className=\"cell\" key={`cell-${rIdx}-${cIdx}`}>\n                  {/* Clue numbers, if any */}\n                  {(clueNumA || clueNumD) && (\n                    <span className=\"clue-label\">\n                      {clueNumA || clueNumD}\n                    </span>\n                  )}\n                  <input\n                    ref={cellRefs.current[rIdx][cIdx]}\n                    className=\"cell-input\"\n                    type=\"text\"\n                    maxLength={1}\n                    value={userGrid[rIdx][cIdx]}\n                    onChange={(e) => handleChange(rIdx, cIdx, e.target.value)}\n                    onKeyDown={(e) => handleKeyDown(rIdx, cIdx, e)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n\n      <button onClick={checkCrossword} style={{ marginTop: '1rem' }}>\n        Check Crossword\n      </button>\n      <p className=\"feedback\">{feedback}</p>\n    </div>\n  );\n};\n\nexport default Crossword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}